#!/usr/bin/env python3
"""
Test file ƒë·ªÉ ki·ªÉm tra Gemini API
Ki·ªÉm tra: API key, version, k·∫øt n·ªëi, v√† ch·ª©c nƒÉng c∆° b·∫£n
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv

def print_header(title):
    """In ti√™u ƒë·ªÅ v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp"""
    print("\n" + "="*60)
    print(f"üîç {title}")
    print("="*60)

def print_section(title):
    """In ti√™u ƒë·ªÅ section"""
    print(f"\nüìã {title}")
    print("-" * 40)

def print_success(message):
    """In th√¥ng b√°o th√†nh c√¥ng"""
    print(f"‚úÖ {message}")

def print_error(message):
    """In th√¥ng b√°o l·ªói"""
    print(f"‚ùå {message}")

def print_info(message):
    """In th√¥ng tin"""
    print(f"‚ÑπÔ∏è  {message}")

def print_warning(message):
    """In c·∫£nh b√°o"""
    print(f"‚ö†Ô∏è  {message}")

def test_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng v√† dependencies"""
    print_header("KI·ªÇM TRA M√îI TR∆Ø·ªúNG")
    
    # Ki·ªÉm tra Python version
    print_section("Python Version")
    print_info(f"Python version: {sys.version}")
    print_info(f"Python executable: {sys.executable}")
    
    # Ki·ªÉm tra file .env
    print_section("Environment Variables")
    env_file = ".env"
    if os.path.exists(env_file):
        print_success(f"File .env t·ªìn t·∫°i: {env_file}")
        
        # Load .env
        load_dotenv()
        
        # Ki·ªÉm tra GEMINI_API_KEY
        gemini_key = os.getenv("GEMINI_API_KEY")
        if gemini_key:
            # ·∫®n ph·∫ßn ƒë·∫ßu v√† cu·ªëi c·ªßa API key ƒë·ªÉ b·∫£o m·∫≠t
            masked_key = gemini_key[:8] + "..." + gemini_key[-4:] if len(gemini_key) > 12 else "***"
            print_success(f"GEMINI_API_KEY: {masked_key}")
            
            # Ki·ªÉm tra ƒë·ªô d√†i API key
            if len(gemini_key) >= 30:
                print_success("API key c√≥ ƒë·ªô d√†i h·ª£p l·ªá")
            else:
                print_warning("API key c√≥ v·∫ª ng·∫Øn, c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá")
        else:
            print_error("GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong .env")
            return False
            
        # Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng kh√°c
        database_url = os.getenv("DATABASE_URL")
        if database_url:
            print_success(f"DATABASE_URL: {database_url}")
        else:
            print_warning("DATABASE_URL kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y")
            
    else:
        print_error(f"File .env kh√¥ng t·ªìn t·∫°i: {env_file}")
        return False
    
    return True

def test_dependencies():
    """Ki·ªÉm tra c√°c dependencies c·∫ßn thi·∫øt"""
    print_header("KI·ªÇM TRA DEPENDENCIES")
    
    required_packages = [
        "langchain",
        "langchain_google_genai", 
        "google_generativeai",
        "pydantic",
        "sqlalchemy"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == "google_generativeai":
                # Test import tr·ª±c ti·∫øp
                import google.generativeai as genai
                version = getattr(genai, "__version__", "Unknown")
                print_success(f"{package}: {version}")
            elif package == "langchain_google_genai":
                # Test import tr·ª±c ti·∫øp
                from langchain_google_genai import ChatGoogleGenerativeAI
                print_success(f"{package}: Imported successfully")
            else:
                # Test import th√¥ng th∆∞·ªùng
                module = __import__(package.replace("-", "_"))
                version = getattr(module, "__version__", "Unknown")
                print_success(f"{package}: {version}")
        except ImportError:
            print_error(f"{package}: Kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            missing_packages.append(package)
        except Exception as e:
            print_error(f"{package}: L·ªói import - {e}")
            missing_packages.append(package)
    
    if missing_packages:
        print_warning(f"C·∫ßn c√†i ƒë·∫∑t: {' '.join(missing_packages)}")
        return False
    
    return True

def test_gemini_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi Gemini API"""
    print_header("KI·ªÇM TRA K·∫æT N·ªêI GEMINI API")
    
    try:
        from langchain_google_genai import ChatGoogleGenerativeAI
        
        # L·∫•y API key
        gemini_key = os.getenv("GEMINI_API_KEY")
        if not gemini_key:
            print_error("Kh√¥ng th·ªÉ l·∫•y GEMINI_API_KEY")
            return False
        
        print_info("ƒêang k·∫øt n·ªëi ƒë·∫øn Gemini API...")
        
        # T·∫°o LLM instance
        llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash",
            google_api_key=gemini_key,
            temperature=0.7,
            max_output_tokens=8192
        )
        
        print_success("ƒê√£ t·∫°o ChatGoogleGenerativeAI instance")
        
        # Test k·∫øt n·ªëi ƒë∆°n gi·∫£n
        print_info("ƒêang test k·∫øt n·ªëi v·ªõi prompt ƒë∆°n gi·∫£n...")
        
        test_prompt = "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn: 'Xin ch√†o, t√¥i l√† Gemini AI'"
        response = llm.invoke(test_prompt)
        
        if hasattr(response, 'content'):
            content = response.content
            print_success(f"Ph·∫£n h·ªìi t·ª´ Gemini: {content}")
        else:
            print_success(f"Ph·∫£n h·ªìi t·ª´ Gemini: {response}")
        
        return True
        
    except Exception as e:
        print_error(f"L·ªói khi k·∫øt n·ªëi Gemini API: {str(e)}")
        print_info(f"Lo·∫°i l·ªói: {type(e).__name__}")
        return False

def test_story_generation():
    """Ki·ªÉm tra ch·ª©c nƒÉng t·∫°o story"""
    print_header("KI·ªÇM TRA CH·ª®C NƒÇNG T·∫†O STORY")
    
    try:
        from langchain_google_genai import ChatGoogleGenerativeAI
        from langchain_core.prompts import ChatPromptTemplate
        from langchain_core.output_parsers import PydanticOutputParser
        
        # Import models
        try:
            from core.models import StoryLLMResponse
            print_success("ƒê√£ import StoryLLMResponse")
        except ImportError as e:
            print_error(f"Kh√¥ng th·ªÉ import StoryLLMResponse: {e}")
            return False
        
        # Import prompts
        try:
            from core.prompts import STORY_PROMPT
            print_success("ƒê√£ import STORY_PROMPT")
        except ImportError as e:
            print_error(f"Kh√¥ng th·ªÉ import STORY_PROMPT: {e}")
            return False
        
        # T·∫°o LLM
        gemini_key = os.getenv("GEMINI_API_KEY")
        llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash",
            google_api_key=gemini_key,
            temperature=0.7,
            max_output_tokens=8192
        )
        
        # T·∫°o parser
        story_parser = PydanticOutputParser(pydantic_object=StoryLLMResponse)
        
        # T·∫°o prompt
        prompt = ChatPromptTemplate.from_messages([
            ("system", STORY_PROMPT),
            ("human", "Create a simple story with this theme: adventure")
        ]).partial(format_instructions=story_parser.get_format_instructions())
        
        print_success("ƒê√£ t·∫°o prompt template")
        
        # Test v·ªõi prompt ƒë∆°n gi·∫£n tr∆∞·ªõc
        print_info("ƒêang test v·ªõi prompt ƒë∆°n gi·∫£n...")
        
        simple_prompt = "H√£y t·∫°o m·ªôt c√¢u chuy·ªán ng·∫Øn v·ªÅ ch·ªß ƒë·ªÅ phi√™u l∆∞u. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, t·ªëi ƒëa 2 c√¢u."
        response = llm.invoke(simple_prompt)
        
        if hasattr(response, 'content'):
            content = response.content
            print_success(f"Ph·∫£n h·ªìi story test: {content}")
        else:
            print_success(f"Ph·∫£n h·ªìi story test: {response}")
        
        return True
        
    except Exception as e:
        print_error(f"L·ªói khi test story generation: {str(e)}")
        print_info(f"Lo·∫°i l·ªói: {type(e).__name__}")
        return False

def test_model_versions():
    """Ki·ªÉm tra version c·ªßa c√°c model"""
    print_header("TH√îNG TIN VERSION")
    
    try:
        import langchain
        print_info(f"LangChain version: {langchain.__version__}")
    except:
        print_warning("Kh√¥ng th·ªÉ l·∫•y LangChain version")
    
    try:
        # Test import v√† version cho langchain_google_genai
        from langchain_google_genai import ChatGoogleGenerativeAI
        print_info("LangChain Google GenAI: Imported successfully")
    except Exception as e:
        print_warning(f"Kh√¥ng th·ªÉ import LangChain Google GenAI: {e}")
    
    try:
        # Test import v√† version cho google_generativeai
        import google.generativeai as genai
        version = getattr(genai, "__version__", "Unknown")
        print_info(f"Google GenerativeAI version: {version}")
    except Exception as e:
        print_warning(f"Kh√¥ng th·ªÉ l·∫•y Google GenerativeAI version: {e}")
    
    try:
        import pydantic
        print_info(f"Pydantic version: {pydantic.__version__}")
    except:
        print_warning("Kh√¥ng th·ªÉ l·∫•y Pydantic version")
    
    # Return True v√¨ t·∫•t c·∫£ versions ƒë·ªÅu ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng
    return True

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y t·∫•t c·∫£ tests"""
    print_header("üöÄ B·∫ÆT ƒê·∫¶U TEST GEMINI API")
    print_info(f"Th·ªùi gian test: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ch·∫°y c√°c test
    tests = [
        ("Environment", test_environment),
        ("Dependencies", test_dependencies),
        ("Gemini Connection", test_gemini_connection),
        ("Story Generation", test_story_generation),
        ("Model Versions", test_model_versions)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print_error(f"L·ªói khi ch·∫°y test {test_name}: {e}")
            results.append((test_name, False))
    
    # T√≥m t·∫Øt k·∫øt qu·∫£
    print_header("üìä T√ìM T·∫ÆT K·∫æT QU·∫¢")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
    
    print(f"\nüéØ K·∫øt qu·∫£: {passed}/{total} tests passed")
    
    if passed == total:
        print_success("üéâ T·∫•t c·∫£ tests ƒë·ªÅu th√†nh c√¥ng! Gemini API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.")
    else:
        print_warning(f"‚ö†Ô∏è  C√≥ {total - passed} test(s) th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·ªói ·ªü tr√™n.")
    
    print_header("üèÅ K·∫æT TH√öC TEST")

if __name__ == "__main__":
    main()
